pipeline {
    agent any

    environment {
        JAVA_TOOL_OPTIONS = '-Dfile.encoding=UTF-8'
        GRADLE_USER_HOME = 'C:\\temp\\gradle-cache'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'
                checkout scm
            }
        }

        stage('Clean Build') {
            steps {
                echo 'üßπ –í—ã–ø–æ–ª–Ω—è–µ–º gradle clean...'
                bat 'call .\\gradlew clean --no-daemon --gradle-user-home=%GRADLE_USER_HOME%'
                echo 'üßπ –û—á–∏—â–∞–µ–º allure-results...'
bat '''
if exist build\\allure-results (
    del /q build\\allure-results\\*
)
'''            }
        }

        stage('UI Tests') {
            steps {
                echo 'üß™ –ó–∞–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç—ã...'
                bat(script: 'call .\\gradlew uiTest --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%', returnStatus: true)
            }
        }

        stage('API Tests') {
            steps {
                echo 'üåê –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã...'
                bat(script: 'call .\\gradlew apiTest --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%', returnStatus: true)
            }
        }
stage('Inject Allure Categories') {
    steps {
        echo 'üß© –ü–æ–¥–∫–ª—é—á–∞–µ–º categories.json –¥–ª—è Allure...'
        writeFile file: 'build/allure-results/categories.json', text: '''
        [
          {
            "name": "Authorization Failure",
            "matchedStatuses": ["failed"],
            "matchedMessageRegex": ".*401 Unauthorized.*|.*Access denied.*|.*token.*expired.*|.*unauthenticated.*"
          },
          {
            "name": "Validation Error",
            "matchedStatuses": ["failed"],
            "matchedMessageRegex": ".*invalid.*|.*must be at least.*|.*required.*|.*Passwords do not match.*|.*cannot start or end with.*|.*Email.*not valid.*"
          },
          {
            "name": "Duplicate Data",
            "matchedStatuses": ["failed"],
            "matchedMessageRegex": ".*already exists.*|.*duplicate.*"
          },
          {
            "name": "Server Error",
            "matchedStatuses": ["broken"],
            "matchedMessageRegex": ".*500 Internal Server Error.*|.*unexpected error.*|.*exception.*"
          },
          {
            "name": "Empty Request",
            "matchedStatuses": ["failed"],
            "matchedMessageRegex": ".*empty body.*|.*missing fields.*|.*no content.*"
          },
          {
            "name": "Content-Type Mismatch",
            "matchedStatuses": ["failed"],
            "matchedMessageRegex": ".*unsupported media type.*|.*Content-Type.*not allowed.*"
          },
          {
            "name": "UI Assertion Mismatch",
            "matchedStatuses": ["failed"],
            "matchedMessageRegex": ".*expected.*but was.*|.*element not found.*|.*FlashMessage.*"
          },
          {
            "name": "Note Access Violation",
            "matchedStatuses": ["failed"],
            "matchedMessageRegex": ".*note.*belongs to another user.*|.*forbidden.*"
          }
        ]
        '''.stripIndent()
    }
}

        stage('Allure Report') {
            steps {
                echo 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Allure –æ—Ç—á—ë—Ç...'
                bat 'call .\\gradlew allureReport --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%'
            }
        }

        stage('Publish Report') {
            steps {
                echo 'üì§ –ü—É–±–ª–∏–∫—É–µ–º Allure –æ—Ç—á–µ—Ç...'
                allure includeProperties: false, jdk: '', results: [[path: 'build/allure-results']]
            }
        }
    }

    post {
        always {
            echo 'üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º JUnit –∏ Allure HTML –æ—Ç—á—ë—Ç...'
            junit testResults: '**/build/test-results/test/*.xml', allowEmptyResults: true, skipMarkingBuildUnstable: true
            archiveArtifacts artifacts: 'build/allure-report/**', allowEmptyArchive: true
        }
    }
}