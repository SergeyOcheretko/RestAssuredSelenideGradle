pipeline {
    agent any

    environment {
        JAVA_TOOL_OPTIONS = '-Dfile.encoding=UTF-8'
        GRADLE_USER_HOME  = 'C:\\temp\\gradle-cache'
        GRID_URL          = 'http://localhost:4444/wd/hub'
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'üì• –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'
                checkout scm
            }
        }

        stage('Cleanup Docker') {
            steps {
                echo 'üßº –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...'
                powershell '''
                docker ps -a --filter "status=exited" -q | ForEach-Object {
                    Write-Host "üßπ –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $_"
                    docker rm $_
                }
                '''
            }
        }

        stage('Detect Port Conflict') {
            steps {
                echo 'üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 4444...'
                powershell '''
                $used = netstat -an | findstr ":4444"
                if ($used) {
                    Write-Host "‚ö†Ô∏è –ü–æ—Ä—Ç 4444 –∑–∞–Ω—è—Ç. –ü—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
                    docker ps -q --filter "ancestor=selenium/hub:4.34.0" | ForEach-Object {
                        docker stop $_
                        docker rm $_
                    }
                }
                '''
            }
        }

        stage('Stop existing Selenium Grid') {
            steps {
                echo 'üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Selenium Grid (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)...'
                bat 'docker compose -f docker-compose.yml down --remove-orphans || echo "–ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å"'
            }
        }

        stage('Start Selenium Grid') {
            steps {
                echo 'üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º Selenium Grid...'
                bat 'docker compose -f docker-compose.yml up -d'
            }
        }

        stage('Wait Grid Ready') {
            steps {
                echo '‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Selenium Grid...'
                powershell '''
                $attempt = 0
                do {
                    $attempt++
                    try {
                        $r = Invoke-WebRequest -Uri "http://localhost:4444/wd/hub/status" -UseBasicParsing -TimeoutSec 5
                        if ($r.Content -match '"ready":true') { exit 0 }
                    } catch {}
                    Start-Sleep -Seconds 2
                } while ($attempt -lt 30)
                throw "‚ùå Selenium Grid –Ω–µ —Å—Ç–∞–ª ready –∑–∞ 60 —Å–µ–∫—É–Ω–¥"
                '''
            }
        }

        stage('Clean Build') {
            steps {
                echo 'üßπ Gradle clean...'
                bat 'call .\\gradlew clean --no-daemon --gradle-user-home=%GRADLE_USER_HOME%'

                echo 'üßπ –û—á–∏—â–∞–µ–º allure-results...'
                bat '''
                if exist build\\allure-results (
                    del /q build\\allure-results\\*
                )
                '''
            }
        }

        stage('UI Tests') {
            steps {
                echo 'üß™ UI —Ç–µ—Å—Ç—ã –Ω–∞ Selenium Grid...'
                bat '''
                call .\\gradlew uiTest --console=plain --no-daemon ^
                -Dwebdriver.remote.url=%GRID_URL% ^
                --gradle-user-home=%GRADLE_USER_HOME%
                '''
            }
        }

        stage('API Tests') {
            steps {
                echo 'üåê –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤...'
                bat 'call .\\gradlew apiTest --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%'
            }
        }

        stage('Allure Report') {
            steps {
                echo 'üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á—ë—Ç–∞...'
                bat 'call .\\gradlew allureReport --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%'
            }
        }

        stage('Publish Report') {
            steps {
                echo 'üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Allure –æ—Ç—á—ë—Ç–∞...'
                allure includeProperties: false, jdk: '', results: [[path: 'build/allure-results']]
            }
        }
    }

    post {
        always {
            echo 'üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º JUnit –∏ Allure HTML –æ—Ç—á—ë—Ç...'
            junit testResults: '**/build/test-results/test/*.xml', allowEmptyResults: true, skipMarkingBuildUnstable: true
            archiveArtifacts artifacts: 'build/allure-report/**', allowEmptyArchive: true

            echo 'üìú –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ Selenium Grid...'
            bat 'docker compose -f docker-compose.yml logs > build/docker-logs.txt'
            archiveArtifacts artifacts: 'build/docker-logs.txt', allowEmptyArchive: true
        }

        cleanup {
            echo 'üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Selenium Grid...'
            bat 'docker compose -f docker-compose.yml down --remove-orphans || exit 0'
        }
    }
}
