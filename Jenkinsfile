pipeline {
    agent any          // –ª–∏–±–æ agent { label 'docker' }

    environment {
        JAVA_TOOL_OPTIONS = '-Dfile.encoding=UTF-8'
        GRADLE_USER_HOME  = 'C:\\temp\\gradle-cache'
        COMPOSE_PROJECT   = 'practice-tests'
    }

    stages {

        /* 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ */
        stage('Checkout') {
            steps {
                echo 'üì• –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'
                checkout scm
            }
        }

        /* 2. –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–∞ */
        stage('Docker Build') {
            steps {
                script {
                    bat 'docker build -t app-under-test:latest .'
                }
            }
        }

        /* 3. –ü–æ–¥–Ω–∏–º–∞–µ–º —Å—Ç–µ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ */
        stage('Start Services') {
            steps {
                script {
                    bat "docker compose -p %COMPOSE_PROJECT% -f docker-compose.test.yml up -d --build"
                }
            }
        }

        /* 4. –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ—Ä—Ç 8080) */
        stage('Wait for App') {
            steps {
                script {
                    bat '''
                    powershell -command "
                    $t = 0
                    while (-not (Test-NetConnection -ComputerName localhost -Port 8080).TcpTestSucceeded) {
                        Start-Sleep 5
                        $t += 5
                        if ($t -gt 120) { throw 'App did not start in 120s' }
                    }"
                    '''
                }
            }
        }

        /* 5. –û—á–∏—Å—Ç–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Gradle */
        stage('Clean Build') {
            steps {
                echo 'üßπ –í—ã–ø–æ–ª–Ω—è–µ–º gradle clean...'
                bat 'call .\\gradlew clean --no-daemon --gradle-user-home=%GRADLE_USER_HOME%'
                echo 'üßπ –û—á–∏—â–∞–µ–º allure-results...'
                bat '''
                if exist build\\allure-results (
                    del /q build\\allure-results\\*
                )
                '''
            }
        }

        /* 6. UI-—Ç–µ—Å—Ç—ã */
        stage('UI Tests') {
            steps {
                echo 'üß™ –ó–∞–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç—ã...'
                bat(script: 'call .\\gradlew uiTest --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%', returnStatus: true)
            }
        }

        /* 7. API-—Ç–µ—Å—Ç—ã */
        stage('API Tests') {
            steps {
                echo 'üåê –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã...'
                bat(script: 'call .\\gradlew apiTest --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%', returnStatus: true)
            }
        }

        /* 8. –ü–æ–¥–∫–ª—é—á–∞–µ–º categories.json –¥–ª—è Allure */
        stage('Inject Allure Categories') {
            steps {
                echo 'üß© –ü–æ–¥–∫–ª—é—á–∞–µ–º categories.json –¥–ª—è Allure...'
                writeFile file: 'build/allure-results/categories.json', text: '''
[
  {
    "name": "Registration Error",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*Username.*must be at least.*|.*cannot start or end with a hyphen.*|.*Password.*too short.*|.*Registration.*failed.*"
  },
  {
    "name": "Login Error",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*Login.*failed.*|.*incorrect password.*|.*user not found.*|.*unauthorized.*"
  },
  {
    "name": "Note Operation Error",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*note.*does not exist.*|.*invalid category.*|.*forbidden.*|.*Note creation failed.*"
  },
  {
    "name": "Validation Error",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*is invalid.*|.*must be at least.*|.*required field.*|.*format is incorrect.*"
  },
  {
    "name": "Duplicate Data",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*already exists.*|.*duplicate.*|.*conflict.*"
  },
  {
    "name": "Empty Request",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*empty body.*|.*missing fields.*|.*no content.*"
  },
  {
    "name": "Content-Type Mismatch",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*unsupported media type.*|.*Content-Type.*not allowed.*|.*header mismatch.*"
  },
  {
    "name": "Authorization Failure",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*401 Unauthorized.*|.*Access denied.*|.*expired token.*|.*unauthenticated.*"
  },
  {
    "name": "UI Assertion Mismatch",
    "matchedStatuses": ["failed"],
    "matchedMessageRegex": ".*expected.*but was.*|.*element not found.*|.*FlashMessage.*|.*invalid label.*"
  },
  {
    "name": "Server Error",
    "matchedStatuses": ["broken"],
    "matchedMessageRegex": ".*500 Internal Server Error.*|.*unexpected error.*|.*exception.*|.*service unavailable.*"
  }
]
'''.stripIndent()
            }
        }

        /* 9. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Allure-–æ—Ç—á—ë—Ç */
        stage('Allure Report') {
            steps {
                echo 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Allure –æ—Ç—á—ë—Ç...'
                bat 'call .\\gradlew allureReport --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%'
            }
        }

        /* 10. –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç—á—ë—Ç */
        stage('Publish Report') {
            steps {
                echo 'üì§ –ü—É–±–ª–∏–∫—É–µ–º Allure –æ—Ç—á—ë—Ç...'
                allure includeProperties: false, jdk: '', results: [[path: 'build/allure-results']]
            }
        }
    }

    post {
        always {
            echo 'üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º JUnit –∏ Allure HTML –æ—Ç—á—ë—Ç...'
            junit testResults: '**/build/test-results/test/*.xml', allowEmptyResults: true, skipMarkingBuildUnstable: true
            archiveArtifacts artifacts: 'build/allure-report/**', allowEmptyArchive: true
        }
        cleanup {
            /* –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã/—Å–µ—Ç–∏/—Ç–æ–º–∞ */
            script {
                bat "docker compose -p %COMPOSE_PROJECT% -f docker-compose.test.yml down --volumes --remove-orphans"
            }
        }
    }
}