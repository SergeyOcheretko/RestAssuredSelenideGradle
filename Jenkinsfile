pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        GRID_STATUS_URL = 'http://localhost:4444/status'
    }

    stages {

        stage('Cleanup Docker') {
            steps {
                echo 'üßº –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...'
                powershell '''
                    docker container prune -f
                '''
            }
        }

        stage('Detect Port Conflict') {
            steps {
                echo 'üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 4444...'
                powershell '''
                    $used = netstat -an | findstr ":4444"
                    $log = "–ü–æ—Ä—Ç 4444 " + ($used ? "–∑–∞–Ω—è—Ç" : "—Å–≤–æ–±–æ–¥–µ–Ω")
                    $log | Out-File "build/port-check.log"

                    if ($used) {
                        "‚ùå –ü–æ—Ä—Ç 4444 –∑–∞–Ω—è—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Grid..." | Out-File "build/grid-recovery.log"
                        docker ps -q --filter "ancestor=selenium/hub" | ForEach-Object { docker stop $_; docker rm $_ }
                        docker compose -f docker-compose.yml up -d
                        Start-Sleep -Seconds 10
                    }
                '''
                archiveArtifacts artifacts: 'build/*.log', allowEmptyArchive: true
            }
        }

        stage('Wait Grid Ready') {
            steps {
                echo '‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Selenium Grid...'
                powershell '''
                    $tries = 0
                    do {
                        Start-Sleep -Seconds 10
                        try {
                            $response = Invoke-RestMethod -Uri "http://localhost:4444/status"
                        } catch {
                            $response = @{ value = @{ ready = $false } }
                        }
                        $tries++
                    } while ($response.value.ready -ne $true -and $tries -lt 5)

                    if ($response.value.ready -ne $true) {
                        "‚ùå Grid –Ω–µ —Å—Ç–∞–ª ready –∑–∞ $(10 * $tries) —Å–µ–∫—É–Ω–¥" | Out-File "build/grid-fail.log"
                        exit 0  # –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
                    } else {
                        "‚úÖ Grid –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ $(10 * $tries) —Å–µ–∫—É–Ω–¥" | Out-File "build/grid-ready.log"
                    }
                '''
                archiveArtifacts artifacts: 'build/grid-*.log', allowEmptyArchive: true
            }
        }

        stage('Clean Build') {
            steps {
                echo 'üßπ –ß–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É...'
                bat 'gradlew clean'
            }
        }

        stage('UI Tests') {
            steps {
                echo 'üéØ –ó–∞–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç—ã...'
                bat 'gradlew testUI'
            }
        }

        stage('API Tests') {
            steps {
                echo 'üåê –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã...'
                bat 'gradlew testAPI'
            }
        }

        stage('Allure Report') {
            steps {
                echo 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Allure –æ—Ç—á—ë—Ç...'
                bat 'gradlew allureReport'
            }
        }

        stage('Publish Report') {
            steps {
                echo 'üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º JUnit, Allure HTML –æ—Ç—á—ë—Ç –∏ docker –ª–æ–≥–∏...'
                junit '**/build/test-results/**/*.xml'
                archiveArtifacts artifacts: '**/build/reports/**, build/docker-logs.txt', allowEmptyArchive: true

                bat 'docker compose -f docker-compose.yml logs > build/docker-logs.txt'
            }
        }

        stage('Stop Grid') {
            steps {
                echo 'üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Selenium Grid...'
                bat 'docker compose -f docker-compose.yml down --remove-orphans || exit 0'
            }
        }
    }

    post {
        always {
            echo 'ü™∂ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞...'
            archiveArtifacts artifacts: 'build/*.log', allowEmptyArchive: true
        }
        failure {
            echo '‚ùó –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π'
        }
        success {
            echo '‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ'
        }
    }
}
