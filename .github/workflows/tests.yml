name: CI ‚Äî UI & API Tests with Allure

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  prepare-allure-cli:
    runs-on: windows-latest
    steps:
      - name: üì¶ Download Allure CLI
        shell: pwsh
        run: |
          $version = "2.27.0"
          $url = "https://github.com/allure-framework/allure2/releases/download/$version/allure-$version.zip"
          Invoke-WebRequest -Uri $url -OutFile allure.zip
          Expand-Archive allure.zip -DestinationPath allure
          Move-Item allure/allure-$version/* allure/ -Force
          Remove-Item allure/allure-$version -Recurse -Force

      - name: üì§ Upload Allure CLI
        uses: actions/upload-artifact@v4
        with:
          name: allure-cli
          path: allure

  ui-tests:
    runs-on: windows-latest
    needs: prepare-allure-cli
    strategy:
      matrix:
        browser: [ chrome, firefox ]
      fail-fast: false
    name: UI Tests ‚Äî ${{ matrix.browser }}
    env:
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      GRADLE_USER_HOME: C:\temp\gradle-cache
      BROWSER: ${{ matrix.browser }}
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: actions/checkout@v4

      - name: üßπ Clean build
        shell: pwsh
        run: ./gradlew clean --no-daemon --gradle-user-home="$env:GRADLE_USER_HOME"

      - name: üß™ Run UI tests
        shell: pwsh
        run: ./gradlew uiTest --console=plain --no-daemon --gradle-user-home="$env:GRADLE_USER_HOME"

      - name: ‚ùå Fail if no Allure results
        shell: pwsh
        run: |
          if ((Get-ChildItem -Path build/allure-results -Filter *.json).Count -eq 0) {
            Write-Error "‚ùå No allure result files found"
            exit 1
          }

      - name: üß© Inject categories.json
        shell: pwsh
        run: copy src/test/resources/categories.json build/allure-results/categories.json

      - name: üß¨ Inject environment.properties
        shell: pwsh
        run: |
          $envText = @"
          Browser=${'${{ matrix.browser }}'}
          Job=UI-${'${{ matrix.browser }}'}
          OS=${{ runner.os }}
          CI=GitHub Actions
          "@
          $envText | Out-File build/allure-results/environment.properties -Encoding UTF8

      - name: üßæ Inject executor.json
        shell: pwsh
        run: |
          $executor = @{
            name       = "UI-${{ matrix.browser }}"
            type       = "GitHub Actions"
            url        = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            buildOrder = 1
            status     = "passed"
          }
          $json = $executor | ConvertTo-Json -Depth 3
          $json | Out-File build/allure-results/executor.json -Encoding UTF8

      - name: üì¶ Upload UI allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: build/allure-results

  api-tests:
    runs-on: windows-latest
    needs: prepare-allure-cli
    name: API Tests
    env:
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      GRADLE_USER_HOME: C:\temp\gradle-cache
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: actions/checkout@v4

      - name: üß™ Run API tests
        shell: pwsh
        run: ./gradlew apiTest --console=plain --no-daemon --gradle-user-home="$env:GRADLE_USER_HOME"

      - name: ‚ùå Fail if no Allure results
        shell: pwsh
        run: |
          if ((Get-ChildItem -Path build/allure-results -Filter *.json).Count -eq 0) {
            Write-Error "‚ùå No allure result files found"
            exit 1
          }

      - name: üß© Inject categories.json
        shell: pwsh
        run: copy src/test/resources/categories.json build/allure-results/categories.json

      - name: üß¨ Inject environment.properties
        shell: pwsh
        run: |
          $envText = @"
          Job=API
          OS=${{ runner.os }}
          CI=GitHub Actions
          "@
          $envText | Out-File build/allure-results/environment.properties -Encoding UTF8

      - name: üßæ Inject executor.json
        shell: pwsh
        run: |
          $executor = @{
            name       = "API"
            type       = "GitHub Actions"
            url        = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            buildOrder = 1
            status     = "passed"
          }
          $json = $executor | ConvertTo-Json -Depth 3
          $json | Out-File build/allure-results/executor.json -Encoding UTF8

      - name: üì¶ Upload API allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-api
          path: build/allure-results

  deploy-report:
    runs-on: windows-latest
    if: always()
    needs: [ prepare-allure-cli, ui-tests, api-tests ]
    steps:
      - uses: actions/checkout@v4

      - name: üì¶ Download Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: merged/allure-results

      - name: üì¶ Download Allure CLI
        uses: actions/download-artifact@v4
        with:
          name: allure-cli
          path: allure

      - name: üîó Add CLI to PATH
        shell: pwsh
        run: |
          $cliRoot = "$env:GITHUB_WORKSPACE/allure"
          $cliBin = Join-Path $cliRoot "bin"

          if (!(Test-Path "$cliBin/allure.bat")) {
            Write-Error "‚ùå 'allure.bat' not found in $cliBin"
            exit 1
          }

          Write-Host "‚úÖ CLI found at: $cliBin"
          $env:PATH += ";$cliBin"
          [System.Environment]::SetEnvironmentVariable("PATH", $env:PATH, [System.EnvironmentVariableTarget]::Process)

          Write-Host "üîç Checking Allure CLI version..."
          & allure --version

      - name: üß¨ Flatten nested result folders
        shell: pwsh
        run: |
          Get-ChildItem -Directory merged/allure-results | ForEach-Object {
            $nested = Join-Path $_.FullName "build/allure-results"
            if (Test-Path $nested) {
              Move-Item "$nested/*" $_.FullName -Force
              Remove-Item $nested -Recurse -Force
            }
          }

      - name: üìú Log executor.json contents
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Path merged/allure-results -Filter executor.json |
          ForEach-Object {
            Write-Host "`n--- Executor file: $($_.FullName) ---"
            Get-Content $_.FullName
          }

      - name: üß¨ Merge Allure reports
        shell: pwsh
        run: |
          $inputDirs = Get-ChildItem -Directory -Path merged/allure-results | Select-Object -ExpandProperty FullName
          allure generate $inputDirs --clean -o build/reports/allure-report

      - name: üßæ Inject final merged executor.json
        shell: pwsh
        run: |
          $executor = @{
            name       = "Merged Report"
            type       = "GitHub Actions"
            url        = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            buildOrder = 10
            status     = "passed"
          }
          $json = $executor | ConvertTo-Json -Depth 3
          $json | Out-File build/reports/allure-report/executor.json -Encoding UTF8

      - name: üöÄ Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: build/reports/allure-report
