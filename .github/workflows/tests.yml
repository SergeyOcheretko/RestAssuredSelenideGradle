name: CI ‚Äî UI & API Tests with Allure

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  prepare-allure-cli:
    runs-on: windows-latest
    steps:
      - name: üì¶ Download Allure CLI
        shell: pwsh
        run: |
          $version = "2.27.0"
          $url = "https://github.com/allure-framework/allure2/releases/download/$version/allure-$version.zip"
          Invoke-WebRequest -Uri $url -OutFile allure.zip
          Expand-Archive allure.zip -DestinationPath allure
          Move-Item allure/allure-$version/* allure/ -Force
          Remove-Item allure/allure-$version -Recurse -Force

      - name: üì§ Upload Allure CLI
        uses: actions/upload-artifact@v4
        with:
          name: allure-cli
          path: allure

  ui-tests:
    runs-on: windows-latest
    needs: prepare-allure-cli
    strategy:
      matrix:
        browser: [ chrome, firefox ]
      fail-fast: false

    env:
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      GRADLE_USER_HOME: C:\temp\gradle-cache
      BROWSER: ${{ matrix.browser }}

    name: UI Tests ‚Äî ${{ matrix.browser }}
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: actions/checkout@v4

      - name: üßπ Clean build + prepare allure-results
        shell: pwsh
        run: |
          ./gradlew clean --no-daemon --gradle-user-home="$env:GRADLE_USER_HOME"
          Remove-Item -Path "build\allure-results" -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "build/allure-results" -Force

      - name: üß™ Run UI tests
        run: ./gradlew uiTest --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%
        env:
          BROWSER: ${{ matrix.browser }}

      - name: ‚ùå Fail if no Allure results
        shell: pwsh
        run: |
          if ((Get-ChildItem -Path build/allure-results -Filter *.json).Count -eq 0) {
            Write-Error "‚ùå No allure result files found"
            exit 1
          }

      - name: üß© Inject categories.json
        shell: pwsh
        run: copy src/test/resources/categories.json build/allure-results/categories.json

      - name: üß¨ Inject environment.properties
        shell: pwsh
        run: |
          echo "Browser=${{ matrix.browser }}" > build/allure-results/environment.properties
          echo "Job=UI-${{ matrix.browser }}" >> build/allure-results/environment.properties
          echo "OS=${{ runner.os }}" >> build/allure-results/environment.properties
          echo "CI=GitHub Actions" >> build/allure-results/environment.properties

      - name: üßæ Inject executor.json
        shell: pwsh
        run: |
          $json = @"
          {
            "name": "UI-${{ matrix.browser }}",
            "type": "GitHub Actions",
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": 1
          }
          "@
          $json | Out-File -FilePath build/allure-results/executor.json -Encoding UTF8

      - name: üì¶ Upload raw allure-results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: build/allure-results

  api-tests:
    runs-on: windows-latest
    needs: prepare-allure-cli

    env:
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      GRADLE_USER_HOME: C:\temp\gradle-cache

    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: actions/checkout@v4

      - name: üß™ Run API tests
        run: ./gradlew apiTest --console=plain --no-daemon --gradle-user-home=%GRADLE_USER_HOME%

      - name: ‚ùå Fail if no Allure results
        shell: pwsh
        run: |
          if ((Get-ChildItem -Path build/allure-results -Filter *.json).Count -eq 0) {
            Write-Error "‚ùå No allure result files found"
            exit 1
          }

      - name: üß© Inject categories.json
        shell: pwsh
        run: copy src/test/resources/categories.json build/allure-results/categories.json

      - name: üß¨ Inject environment.properties
        shell: pwsh
        run: |
          echo "Job=API" > build/allure-results/environment.properties
          echo "OS=${{ runner.os }}" >> build/allure-results/environment.properties
          echo "CI=GitHub Actions" >> build/allure-results/environment.properties

      - name: üßæ Inject executor.json
        shell: pwsh
        run: |
          $json = @"
          {
            "name": "API",
            "type": "GitHub Actions",
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": 1
          }
          "@
          $json | Out-File -FilePath build/allure-results/executor.json -Encoding UTF8

      - name: üì¶ Upload raw allure-results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-api
          path: build/allure-results

  deploy-report:
    runs-on: windows-latest
    if: always()
    needs: [ prepare-allure-cli, ui-tests, api-tests ]

    steps:
      - uses: actions/checkout@v4

      - name: üì¶ Download Allure raw results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: merged/allure-results

      - name: üì¶ Download Allure CLI
        uses: actions/download-artifact@v4
        with:
          name: allure-cli
          path: allure

      - name: üîó Add CLI to PATH
        shell: pwsh
        run: |
          $cliBinPath = Resolve-Path "$env:GITHUB_WORKSPACE/allure/bin"
          if (!(Test-Path "$cliBinPath/allure.bat")) {
            Write-Error "‚ùå CLI binary not found"
          }
          $env:PATH += ";$cliBinPath"

      - name: üß¨ Merge raw Allure results
        shell: pwsh
        run: |
          $inputDirs = Get-ChildItem -Directory -Path merged/allure-results | Select-Object -ExpandProperty FullName
          & "$env:GITHUB_WORKSPACE/allure/bin/allure.bat" generate $inputDirs --clean -o build/reports/allure-report/allureReport

      - name: üßæ Inject merged executor.json
        shell: pwsh
        run: |
          $json = @"
          {
            "name": "Merged Report",
            "type": "GitHub Actions",
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": 10
          }
          "@
          New-Item -Path build/reports/allure-report/allureReport -ItemType Directory -Force
          $json | Out-File -FilePath build/reports/allure-report/allureReport/executor.json -Encoding UTF8

      - name: üöÄ Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: build/reports/allure-report/allureReport
